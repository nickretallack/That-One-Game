// Generated by CoffeeScript 1.3.3
(function() {
  var Board, Tile, V, Vector, cardinals, random_choice, tile_count, tile_size, tile_types;

  Vector = (function() {

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.add = function(vector) {
      return V(vector.x + this.x, vector.y + this.y);
    };

    Vector.prototype.scale = function(factor) {
      return V(this.x * factor, this.y * factor);
    };

    Vector.prototype.css_position = function() {
      return {
        left: this.x,
        bottom: this.y
      };
    };

    Vector.prototype.css_size = function() {
      return {
        width: this.x,
        height: this.y
      };
    };

    Vector.prototype.hash_key = function() {
      return "" + this.x + "-" + this.y;
    };

    return Vector;

  })();

  V = function(x, y) {
    return new Vector(x, y);
  };

  cardinals = {
    left: V(-1, 0),
    right: V(1, 0),
    up: V(0, 1),
    down: V(0, -1)
  };

  tile_size = 40;

  tile_count = V(10, 9);

  tile_types = "burger hotdog pizza".split(' ');

  random_choice = function(choices) {
    var index;
    index = Math.floor(Math.random() * choices.length) % choices.length;
    return choices[index];
  };

  Tile = (function() {

    function Tile(_arg) {
      this.position = _arg.position, this.board = _arg.board, this.type = _arg.type;
      _.bindAll(this);
      this.element = $("<div class=\"positioned tile " + this.type + "\"></div>");
      this.element.css({
        position: 'absolute'
      });
      this.element.css(V(tile_size, tile_size).css_size());
      this.re_position();
      this.element.on('click', this.clicked);
    }

    Tile.prototype.re_position = function() {
      return this.element.css(this.position.scale(tile_size).css_position());
    };

    Tile.prototype.clicked = function() {
      return this.board.find_contiguous(this);
    };

    return Tile;

  })();

  Board = (function() {

    function Board(_arg) {
      var tile, x, y, _i, _j, _ref, _ref1;
      this.element = _arg.element;
      this.element.css(tile_count.scale(tile_size).css_size());
      this.tiles = {};
      for (x = _i = 0, _ref = tile_count.x; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = tile_count.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          tile = new Tile({
            position: V(x, y),
            board: this,
            type: random_choice(tile_types)
          });
          this.register_tile(tile);
          this.element.append(tile.element);
        }
      }
    }

    Board.prototype.get_tile = function(position) {
      return this.tiles[tile.position.hash_key()];
    };

    Board.prototype.register_tile = function(tile) {
      return this.tiles[tile.position.hash_key()] = tile;
    };

    Board.prototype.unregister_tile = function(tile) {
      return delete this.tiles[tile.position.hash_key()];
    };

    Board.prototype.move_tile = function(tile, position) {
      unregister_tile(tile);
      tile.position = position;
      return register_tile(tile);
    };

    Board.prototype.find_contiguous = function(start_tile) {
      var collected, current_tile, found_tile, hash_key, name, position, results, tile, vector, work_queue, _i, _len, _results;
      collected = {};
      work_queue = [start_tile];
      while (work_queue.length) {
        current_tile = work_queue.pop();
        for (name in cardinals) {
          vector = cardinals[name];
          position = current_tile.position.add(vector);
          hash_key = position.hash_key();
          if (!(hash_key in collected) && hash_key in this.tiles) {
            found_tile = this.tiles[hash_key];
            if (found_tile.type === start_tile.type) {
              collected[hash_key] = found_tile;
              work_queue.push(found_tile);
            }
          }
        }
      }
      results = _.values(collected);
      _results = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        tile = results[_i];
        _results.push(tile.element.css({
          background: 'green'
        }));
      }
      return _results;
    };

    return Board;

  })();

  $(function() {
    return new Board({
      element: $('#game')
    });
  });

}).call(this);
